function P = aggregate(P,c,varargin)

%AGGREGATE Aggregate points in PPS to new point pattern
%
% Syntax
%
%     P2  = aggregate(P,c)
%     P2  = aggregate(P,c,pn,pv,...)
%
% Description
%
%     aggregate merges points in a PPS object to a new PPS object based on
%     the labels in the marks c. The labels can be generated by the
%     function PPS/cluster. Equal labels in c must not occur in different
%     drainage basins. Moreover, the edges of a shortest path tree between
%     points with a specific label must not lie on shortest path trees
%     of other labels.
%
% Input arguments
%
%     P      instance of PPS
%     c      npoints(P)x1 label vector
%
%     Parameter name/value pairs
%
%     'type'         'centroid' (default) finds the location in the network
%                    that has the least squared distance to all points
%                    with the same label. Distances are calculated along
%                    the stream network.
%                    'euclideancentroid' calculates the centroid of all
%                    points with the same label and snaps the location of
%                    the centroid to the stream network. 
%
% Output arguments
%
%     P2     PPS object
%
% Example
%
%     DEM = GRIDobj('srtm_bigtujunga30m_utm11.tif');
%     FD  = FLOWobj(DEM);
%     S   = STREAMobj(FD,'minarea',500);
%     S   = klargestconncomps(S,1);
%     P   = PPS(S,'runif',200,'z',DEM);
%     c   = cluster(P,'cutoff',2000);
%     convhull(P,'groups',c,'bufferwidth',200)
%     P2  = aggregate(P,c);
%     hold on
%     plotpoints(P2,'Size',30,'MarkerFaceColor','b')
%     hold off
%     axis equal
%     box on
%
% See also: PPS, PPS/cluster, PPS/convhull
%
% Author: Wolfgang Schwanghart (w.schwanghart[at]geo.uni-potsdam.de)
% Date: 30. September, 2019


p = inputParser;
p.KeepUnmatched = true;
addRequired(p,'P');
addRequired(p,'c',@(x) numel(x) == npoints(P));
addParameter(p,'type','centroid');
addParameter(p,'useparallel',true);

% Parse
parse(p,P,c,varargin{:});

% make sure that one label does not occur in multiple drainage basins.
concom = conncomps(P.S);
concom = getmarks(P,concom);
tf     = accumarray(c,concom,[],@(x) numel(unique(x)));
if any(tf>1)
    error('Labels span across more than one drainage basin.')
end

switch lower(p.Results.type)
    case 'euclideancentroid'
        % Euclidean distance is easy. 
        [uniquec,~,locb] = unique(c,'stable'); 
        nc    = numel(uniquec);
        [x,y] = points(P);
        % calculate centroids for each label
        xc = accumarray(locb,x,[nc 1],@mean);
        yc = accumarray(locb,y,[nc 1],@mean);
        
        % snap centroids back to the stream network
        [~,~,IX] = snap2stream(P.S,xc,yc);
        % and update the point pattern in P
        [~,P.PP] = ismember(IX,P.S.IXgrid);
    
    case 'centroid'
         
        % The network centroid is a bit more tricky
        G    = as(P,'graph');
        % This line returns for each label the edges that belong to the
        % minimum spanning tree that connects the points
        E    = accumarray(c,P.PP,[max(c) 1],@(x) {spedges(x)});
        % list the edges
        E    = vertcat(E{:});

        if numel(unique(E)) ~= numel(E)
            error('Overlapping shortest path trees');
        end
        
        % Edges that should be removed from the graph
        E       = setdiff(1:size(G.Edges,1),E);
        G       = rmedge(G,E');
        % Also remove nodes with zero degree
        G       = rmnode(G,find(degree(G) == 0));  
        % Calculate the connected components of the remaining network
        cc      = conncomp(G,'outputform','cell');
        
        % Go through the individual connected components
        ix      = zeros(size(cc));
        parfor r = 1:numel(cc)
            % Extract the subgraph that contains each connected component
            GSUB = subgraph(G,cc{r});
            % Calculate distances from each point to all nodes 
            d    = distances(GSUB,find(GSUB.Nodes.ispoint));
            % Calculate the sum of squares
            d    = sum(d.^2,1);
            % Find the node with the minimum sum of squares
            [~,ixx] = min(d);
            ix(r)  = GSUB.Nodes.pts(ixx);
        end
        
        I    = accumarray(c,1) > 1;
        I    = I(c);
        P.PP(I) = [];
        P.PP = [P.PP;ix(:)];
        
end


function E = spedges(nodes)

nodes = unique(nodes);    
if numel(nodes) == 1
    E = [];
    return
end
[~,~,E] = shortestpathtree(G,nodes(1),nodes(2:end));
E = find(E);

end
end

